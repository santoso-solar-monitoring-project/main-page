patch-package
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
--- a/node_modules/react-spring/renderprops.d.ts
+++ b/node_modules/react-spring/renderprops.d.ts
@@ -10,3 +10,30 @@ declare const augmentedAnimated: typeof animated &
   }
 
 export { augmentedAnimated as animated }
+
+import { Controller } from './web.cjs';
+interface Controller {
+  new(props, config?): {
+    dependents: Set<any>;
+    isActive: boolean;
+    hasChanged: boolean;
+    props: any;
+    merged: any;
+    animations: any;
+    interpolations: any;
+    animatedProps: any;
+    configs: any[];
+    frame: any | undefined;
+    startTime: any | undefined;
+    lastTime: any | undefined;
+
+    update(props, ...start): any;
+    start(onEnd, onUpdate): Promise<any>;
+    stop(finished): void;
+    destroy(): void;
+    debouncedOnEnd(result): void;
+    getValues(): any;
+  };
+}
+const Ctrl = Controller as Controller;
+export { Ctrl as Controller }
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
--- a/node_modules/react-spring/web.d.ts
+++ b/node_modules/react-spring/web.d.ts
@@ -51,13 +51,15 @@ export interface InterpolationChain<T> {
 export type OpaqueInterpolation<T> = {
   interpolate: InterpolationChain<T>
   getValue: () => T
-} & T
+  setValue: (value: T, flush?: boolean) => void
+  value: T
+} //& T
 
 // Map all keys to our OpaqueInterpolation type which can either be interpreted
 // as its initial value by "animated.{tag}" or chained with interpolations.
-export type AnimatedValue<T extends object> = {
+export type AnimatedValue<T extends object, isRaw=false> = isRaw extends false ?{
   [P in keyof T]: OpaqueInterpolation<T[P]>
-}
+} : T;
 
 // Make ForwardedProps chainable with interpolate / make it an animated value.
 export type ForwardedProps<T> = Pick<T, Exclude<keyof T, ExcludedProps>>
@@ -121,38 +123,93 @@ export type UseSpringProps<DS extends object> = Merge<
 >
 
 // there's a third value in the tuple but it's not public API (?)
-export function useSpring<DS extends CSSProperties>(
-  values: UseSpringProps<DS & CSSProperties>
-): ForwardedProps<DS>
-export function useSpring<DS extends CSSProperties>(
+// export function useSpring<DS extends CSSProperties>(
+//   values: UseSpringProps<DS & CSSProperties>
+// ): ForwardedProps<DS>
+// export function useSpring<DS extends CSSProperties>(
+//   getProps: () => UseSpringProps<DS & CSSProperties>
+// ): [ForwardedProps<DS>, SetUpdateFn<DS>]
+// export function useSpring<DS extends object>(
+//   getProps: () => UseSpringProps<DS>
+// ): [AnimatedValue<ForwardedProps<DS>>, SetUpdateFn<DS>]
+// export function useSpring<DS extends object>(
+//   values: UseSpringProps<DS>
+// ): AnimatedValue<ForwardedProps<DS>>
+/* My interpretation of the docs --Spencer 2/15 */
+type InferFromStrong<T extends object> = T extends { to: infer TTo, from: infer TFrom }
+  ? TTo & TFrom
+  : T extends { to: infer TTo }
+  ? TTo
+  : T extends { from: infer TFrom }
+  ? TFrom
+  : ForwardedProps<T>
+type ScriptProps<DS> = {
+  from: DS,
+  to: (next: (value: DS) => Promise<void>, cancel: () => Promise<void>) => Promise<void>
+  onRest?(ds: DS): void
+} & UseSpringBaseProps
+type isRaw<DS> = DS extends {config: {raw: any}} ? true : false;
+export function useSpring<DS extends object>(
   getProps: () => UseSpringProps<DS & CSSProperties>
-): [ForwardedProps<DS>, SetUpdateFn<DS>]
+): [AnimatedValue<InferFromStrong<DS>, isRaw<DS>>, SetUpdateFn<InferFromStrong<DS>>]
 export function useSpring<DS extends object>(
-  getProps: () => UseSpringProps<DS>
-): [AnimatedValue<ForwardedProps<DS>>, SetUpdateFn<DS>]
+  script: ScriptProps<DS>):
+  AnimatedValue<ForwardedProps<DS>, isRaw<DS>>
 export function useSpring<DS extends object>(
-  values: UseSpringProps<DS>
-): AnimatedValue<ForwardedProps<DS>>
+  values: UseSpringProps<DS & CSSProperties>
+): AnimatedValue<InferFromStrong<DS>, isRaw<DS>>
+// My shortcut versions which return raw not animated values.
+export function useSpring$<DS extends object>(
+  getProps: () => UseSpringProps<DS & CSSProperties>
+): [InferFromStrong<DS>, SetUpdateFn<InferFromStrong<DS>>]
+export function useSpring$<DS extends object>(
+  script: ScriptProps<DS>):
+  ForwardedProps<DS>
+export function useSpring$<DS extends object>(
+  values: UseSpringProps<DS & CSSProperties>
+): InferFromStrong<DS>
+
 
 // there's a third value in the tuple but it's not public API (?)
+// export function useSprings<TItem, DS extends CSSProperties>(
+//   count: number,
+//   items: ReadonlyArray<TItem>,
+// ): ForwardedProps<DS>[] // safe to modify (result of .map)
 export function useSprings<TItem, DS extends CSSProperties>(
   count: number,
   items: ReadonlyArray<TItem>,
-): ForwardedProps<DS>[] // safe to modify (result of .map)
+): AnimatedValue<ForwardedProps<DS>>[] // safe to modify (result of .map)
 export function useSprings<DS extends object>(
   count: number,
   getProps: () => UseSpringProps<DS>
 ): [AnimatedValue<ForwardedProps<DS>>[], SetUpdateFn<DS>]
+// My shortcut versions which return raw not animated values.
+export function useSprings$<TItem, DS extends CSSProperties>(
+  count: number,
+  items: ReadonlyArray<TItem>,
+): ForwardedProps<DS>[] // safe to modify (result of .map)
+export function useSprings$<DS extends object>(
+  count: number,
+  getProps: () => UseSpringProps<DS>
+): [ForwardedProps<DS>[], SetUpdateFn<DS>]
 
 // there's a third value in the tuple but it's not public API (?)
+// export function useTrail<DS extends CSSProperties>(
+//   count: number,
+//   getProps: () => UseSpringProps<DS & CSSProperties>
+// ): [ForwardedProps<DS>[], SetUpdateFn<DS>]
+// export function useTrail<DS extends CSSProperties>(
+//   count: number,
+//   values: UseSpringProps<DS & CSSProperties>
+// ): ForwardedProps<DS>[] // safe to modify (result of .map)
 export function useTrail<DS extends CSSProperties>(
   count: number,
   getProps: () => UseSpringProps<DS & CSSProperties>
-): [ForwardedProps<DS>[], SetUpdateFn<DS>]
+): [AnimatedValue<ForwardedProps<DS>>[], SetUpdateFn<DS>]
 export function useTrail<DS extends CSSProperties>(
   count: number,
   values: UseSpringProps<DS & CSSProperties>
-): ForwardedProps<DS>[] // safe to modify (result of .map)
+): AnimatedValue<ForwardedProps<DS>>[] // safe to modify (result of .map)
 export function useTrail<DS extends object>(
   count: number,
   getProps: () => UseSpringProps<DS>
@@ -161,6 +218,23 @@ export function useTrail<DS extends object>(
   count: number,
   values: UseSpringProps<DS>
 ): AnimatedValue<ForwardedProps<DS>>[] // safe to modify (result of .map)
+// My shortcut versions which return raw not animated values.
+export function useTrail$<DS extends CSSProperties>(
+  count: number,
+  getProps: () => UseSpringProps<DS & CSSProperties>
+): [ForwardedProps<DS>[], SetUpdateFn<DS>]
+export function useTrail$<DS extends CSSProperties>(
+  count: number,
+  values: UseSpringProps<DS & CSSProperties>
+): ForwardedProps<DS>[] // safe to modify (result of .map)
+export function useTrail$<DS extends object>(
+  count: number,
+  getProps: () => UseSpringProps<DS>
+): [ForwardedProps<DS>[], SetUpdateFn<DS>]
+export function useTrail$<DS extends object>(
+  count: number,
+  values: UseSpringProps<DS>
+): ForwardedProps<DS>[] // safe to modify (result of .map)
 
 export interface UseTransitionProps<TItem, DS extends object>
   extends HooksBaseProps {
@@ -204,6 +278,15 @@ export interface UseTransitionResult<TItem, DS extends object> {
   props: AnimatedValue<ForwardedProps<DS>>
 }
 
+// export function useTransition<TItem, DS extends CSSProperties>(
+//   items: ReadonlyArray<TItem> | TItem | null | undefined,
+//   keys:
+//     | ((item: TItem) => TransitionKeyProps)
+//     | ReadonlyArray<TransitionKeyProps>
+//     | TransitionKeyProps
+//     | null,
+//   values: Merge<DS & CSSProperties, UseTransitionProps<TItem, DS>>
+// ): UseTransitionResult<TItem, ForwardedProps<DS>>[] // result array is safe to modify
 export function useTransition<TItem, DS extends CSSProperties>(
   items: ReadonlyArray<TItem> | TItem | null | undefined,
   keys:
@@ -212,7 +295,7 @@ export function useTransition<TItem, DS extends CSSProperties>(
     | TransitionKeyProps
     | null,
   values: Merge<DS & CSSProperties, UseTransitionProps<TItem, DS>>
-): UseTransitionResult<TItem, ForwardedProps<DS>>[] // result array is safe to modify
+): UseTransitionResult<TItem, AnimatedValue<ForwardedProps<DS>>>[] // result array is safe to modify
 export function useTransition<TItem, DS extends object>(
   items: ReadonlyArray<TItem> | TItem | null | undefined,
   keys:
@@ -222,3 +305,22 @@ export function useTransition<TItem, DS extends object>(
     | null,
   values: Merge<DS, UseTransitionProps<TItem, DS>>
 ): UseTransitionResult<TItem, AnimatedValue<ForwardedProps<DS>>>[] // result array is safe to modify
+// My shortcut versions which return raw not animated values.
+export function useTransition$<TItem, DS extends CSSProperties>(
+  items: ReadonlyArray<TItem> | TItem | null | undefined,
+  keys:
+    | ((item: TItem) => TransitionKeyProps)
+    | ReadonlyArray<TransitionKeyProps>
+    | TransitionKeyProps
+    | null,
+  values: Merge<DS & CSSProperties, UseTransitionProps<TItem, DS>>
+): UseTransitionResult<TItem, ForwardedProps<DS>>[] // result array is safe to modify
+export function useTransition$<TItem, DS extends object>(
+  items: ReadonlyArray<TItem> | TItem | null | undefined,
+  keys:
+    | ((item: TItem) => TransitionKeyProps)
+    | ReadonlyArray<TransitionKeyProps>
+    | TransitionKeyProps           
+    | null,
+  values: Merge<DS, UseTransitionProps<TItem, DS>>
+): UseTransitionResult<TItem, ForwardedProps<DS>>[] // result array is safe to modify
old mode 100644
new mode 100755
--- a/node_modules/react-spring/web.js
+++ b/node_modules/react-spring/web.js
@@ -701,6 +701,9 @@ class AnimatedInterpolation extends AnimatedArrayWithChildren {
     this.calc = Interpolation.create(_config, _arg);
   }
 
+  get value() {
+    return this.getValue();
+  }
 }
 const interpolate$1 = (parents, config, arg) => parents && new AnimatedInterpolation(parents, config, arg);
 
@@ -970,6 +973,9 @@ class AnimatedArray extends AnimatedArrayWithChildren {
     this.payload = array.map(n => new AnimatedValue(n));
   }
 
+  get value() {
+    return this.getValue();
+  }
 }
 
 let active = false;
@@ -1084,8 +1090,16 @@ const start = controller => {
 
 let G = 0;
 class Controller {
+  get values() {
+    const result = {};
+    for (let key in this.animations) {
+      result[key] = this.animations[key].interpolation.getValue();
+    }
+    return result;
+  }
+
   constructor(props) {
-    this.getValues = () => this.interpolations;
+    this.getValues = () => (this.props.config && this.props.config.raw) ? this.values : this.interpolations;
 
     this.id = G++;
     this.idle = true;
@@ -1096,7 +1110,7 @@ class Controller {
     this.merged = {};
     this.animations = {};
     this.interpolations = {};
-    this.values = {};
+    // this.values = {};
     this.configs = [];
     this.listeners = [];
     this.queue = [];
@@ -1415,12 +1429,12 @@ class Controller {
     if (this.hasChanged) {
       // Make animations available to frameloop
       this.configs = Object.values(this.animations);
-      this.values = {};
+      // this.values = {};
       this.interpolations = {};
 
       for (let key in this.animations) {
         this.interpolations[key] = this.animations[key].interpolation;
-        this.values[key] = this.animations[key].interpolation.getValue();
+        // this.values[key] = this.animations[key].interpolation.getValue();
       }
     }
 
@@ -1433,7 +1447,7 @@ class Controller {
     this.merged = {};
     this.animations = {};
     this.interpolations = {};
-    this.values = {};
+    // this.values = {};
     this.configs = [];
     this.local = 0;
   }
@@ -1877,4 +1891,15 @@ const extendedAnimated = domElements.reduce((acc, element) => {
   return acc;
 }, createAnimatedComponent);
 
-export { config, extendedAnimated as animated, interpolate$1 as interpolate, Globals, useSpring, useTrail, useTransition, useChain, useSprings };
+const attachRaw = (props) => ({...props, config: {...props.config, raw: true}});
+const bindProps = (props) => is.fun(props) ? (...args)=>attachRaw(props(...args)) : is.arr(props) ? props.map(p => attachRaw(bindProps(p))) : attachRaw(props);
+
+const useSprings$ = (length, props) => useSprings(length, bindProps(props));
+
+const useSpring$ = props => useSpring(bindProps(props));
+
+const useTrail$ = (length, props) => useTrail(length, bindProps(props));
+
+const useTransition$ = (input, keyTransform, config) => useTransition(input, keyTransform, bindProps({config}));
+
+export { config, extendedAnimated as animated, interpolate$1 as interpolate, Globals, useSpring, useTrail, useTransition, useChain, useSprings, useSpring$, useSprings$, useTrail$, useTransition$ };
