patch-package
old mode 100644
new mode 100755
old mode 100644
new mode 100755
old mode 100644
new mode 100755
--- a/node_modules/denque/index.d.ts
+++ b/node_modules/denque/index.d.ts
@@ -1,8 +1,8 @@
-declare class Denque<T = any> {
+declare class Denque<T = any> extends Array<T> {
   constructor();
   constructor(array: T[]);
 
-  push(item: T): number;
+  push(...items: T[]): number;
   unshift(item: T): number;
   pop(): T | undefined;
   removeBack(): T | undefined;
@@ -13,6 +13,7 @@ declare class Denque<T = any> {
   get(index: number): T | undefined;
   remove(index: number, count: number): T[];
   removeOne(index: number): T | undefined;
+  slice(start?: number, end?: number): T[];
   splice(index: number, count: number, ...item: T[]): T[] | undefined;
   isEmpty(): boolean;
   clear(): void;
@@ -21,6 +22,7 @@ declare class Denque<T = any> {
   toArray(): T[];
 
   length: number;
+  [n: number]: T;
 }
 
 export = Denque;
old mode 100644
new mode 100755
--- a/node_modules/denque/index.js
+++ b/node_modules/denque/index.js
@@ -1,9 +1,32 @@
 'use strict';
 
+const indexer = {
+  get: (obj, key) => {
+    if (key in obj) {
+      return obj[key];
+    } else if (typeof key !== 'symbol' && Number.isInteger(+key)) {
+      return obj.peekAt(+key);
+    } else if (
+      key in Array.prototype &&
+      typeof Array.prototype[key] === 'function'
+    ) {
+      return (...args) => Array.prototype[key].call([...obj], ...args);
+    } else {
+      return undefined;
+    }
+  },
+  set: (obj, key, value) => {
+    if (Number.isInteger(+key)) obj.setAt(+key, value);
+    else if (key in obj) obj[key] = value;
+    return true;
+  },
+};
+
 /**
  * Custom implementation of a double ended queue.
  */
 function Denque(array) {
+  if (this == null) return new Denque(array);
   this._head = 0;
   this._tail = 0;
   this._capacityMask = 0x3;
@@ -11,6 +34,7 @@ function Denque(array) {
   if (Array.isArray(array)) {
     this._fromArray(array);
   }
+  return new Proxy(this, indexer);
 }
 
 /**
@@ -19,6 +43,67 @@ function Denque(array) {
  * -------------
  */
 
+Denque.prototype.setAt = function setAt(index, value) {
+  var i = index;
+  // expect a number or return undefined
+  if (i !== (i | 0)) {
+    return void 0;
+  }
+  var len = this.size();
+  if (i >= len || i < -len) return undefined;
+  if (i < 0) i += len;
+  i = (this._head + i) & this._capacityMask;
+  this._list[i] = value;
+};
+
+/*
+Test with:
+a = new Denque([0,1,2,3,4]);a.shift();a.slice()
+// Expect [1,2,3,4]
+a = new Denque([0,1,2,3,4]);a.shift();a.slice(2,-1)
+// Expect [3]
+*/
+Denque.prototype.slice = function slice(start, end) {
+  var newArray;
+  var list = this._list;
+  var len = this.length;
+  // Defaults
+  if (start == null) start = 0;
+  if (end == null) end = len;
+  // End too big
+  if (end > len) end = len;
+  // Negative start/stop
+  if (start < 0) start = len + Math.max(-len, start);
+  if (end < 0) end = len + Math.max(-len, end);
+  // Empty slice
+  if (start >= end) return [];
+  // How many elements to slice
+  const count = Math.max(0, end - start);
+  // Account for queue index coordinates
+  start += this._head;
+  end = Math.min(list.length, this._head + end);
+  // How many wrap around elements
+  const spill = count - (end - start);
+  // Concatenate all sliced elements
+  newArray = [
+    ...list.slice(start, end),
+    ...list.slice(0, Math.min(this._tail, spill)),
+  ];
+  return newArray;
+};
+
+Denque.prototype[Symbol.iterator] = function*() {
+  const list = this._list,
+    len = list.length,
+    head = this._head,
+    tail = this._tail,
+    end = head < tail ? tail : len;
+  for (let i = head; i < end; i++) yield list[i];
+  if (end > tail) {
+    for (let i = 0; i < tail; i++) yield list[i];
+  }
+};
+
 /**
  * Returns the item at the specified index from the list.
  * 0 is the first element, 1 is the second, and so on...
@@ -30,7 +115,7 @@ function Denque(array) {
 Denque.prototype.peekAt = function peekAt(index) {
   var i = index;
   // expect a number or return undefined
-  if ((i !== (i | 0))) {
+  if (i !== (i | 0)) {
     return void 0;
   }
   var len = this.size();
@@ -81,7 +166,7 @@ Denque.prototype.peekBack = function peekBack() {
 Object.defineProperty(Denque.prototype, 'length', {
   get: function length() {
     return this.size();
-  }
+  },
 });
 
 /**
@@ -119,7 +204,8 @@ Denque.prototype.shift = function shift() {
   var item = this._list[head];
   this._list[head] = undefined;
   this._head = (head + 1) & this._capacityMask;
-  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();
+  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2)
+    this._shrinkArray();
   return item;
 };
 
@@ -127,8 +213,12 @@ Denque.prototype.shift = function shift() {
  * Add an item to the bottom of the list.
  * @param item
  */
-Denque.prototype.push = function push(item) {
-  if (item === undefined) return this.size();
+Denque.prototype.push = function push(...items) {
+  if (!items.length) return this.size();
+  else if (items.length !== 1) {
+    return this.push(items[0]), this.push(...items.slice(1));
+  }
+  var item = items[0];
   var tail = this._tail;
   this._list[tail] = item;
   this._tail = (tail + 1) & this._capacityMask;
@@ -165,7 +255,7 @@ Denque.prototype.pop = function pop() {
 Denque.prototype.removeOne = function removeOne(index) {
   var i = index;
   // expect a number or return undefined
-  if ((i !== (i | 0))) {
+  if (i !== (i | 0)) {
     return void 0;
   }
   if (this._head === this._tail) return void 0;
@@ -178,13 +268,13 @@ Denque.prototype.removeOne = function removeOne(index) {
   var k;
   if (index < size / 2) {
     for (k = index; k > 0; k--) {
-      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];
+      this._list[i] = this._list[(i = (i - 1 + len) & this._capacityMask)];
     }
     this._list[i] = void 0;
     this._head = (this._head + 1 + len) & this._capacityMask;
   } else {
     for (k = size - 1 - index; k > 0; k--) {
-      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];
+      this._list[i] = this._list[(i = (i + 1 + len) & this._capacityMask)];
     }
     this._list[i] = void 0;
     this._tail = (this._tail - 1 + len) & this._capacityMask;
@@ -205,7 +295,7 @@ Denque.prototype.remove = function remove(index, count) {
   var removed;
   var del_count = count;
   // expect a number or return undefined
-  if ((i !== (i | 0))) {
+  if (i !== (i | 0)) {
     return void 0;
   }
   if (this._head === this._tail) return void 0;
@@ -233,27 +323,28 @@ Denque.prototype.remove = function remove(index, count) {
   if (index + count === size) {
     this._tail = (this._tail - count + len) & this._capacityMask;
     for (k = count; k > 0; k--) {
-      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
+      this._list[(i = (i + 1 + len) & this._capacityMask)] = void 0;
     }
     return removed;
   }
   if (index === 0) {
     this._head = (this._head + count + len) & this._capacityMask;
     for (k = count - 1; k > 0; k--) {
-      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
+      this._list[(i = (i + 1 + len) & this._capacityMask)] = void 0;
     }
     return removed;
   }
-  if (index < size / 2) {
+  if (i < size / 2) {
     this._head = (this._head + index + count + len) & this._capacityMask;
     for (k = index; k > 0; k--) {
-      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);
+      this.unshift(this._list[(i = (i - 1 + len) & this._capacityMask)]);
     }
     i = (this._head - 1 + len) & this._capacityMask;
     while (del_count > 0) {
-      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;
+      this._list[(i = (i - 1 + len) & this._capacityMask)] = void 0;
       del_count--;
     }
+    if (index < 0) this._tail = i;
   } else {
     this._tail = i;
     i = (i + count + len) & this._capacityMask;
@@ -262,11 +353,12 @@ Denque.prototype.remove = function remove(index, count) {
     }
     i = this._tail;
     while (del_count > 0) {
-      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
+      this._list[(i = (i + 1 + len) & this._capacityMask)] = void 0;
       del_count--;
     }
   }
-  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();
+  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2)
+    this._shrinkArray();
   return removed;
 };
 
@@ -284,7 +376,7 @@ Denque.prototype.remove = function remove(index, count) {
 Denque.prototype.splice = function splice(index, count) {
   var i = index;
   // expect a number or return undefined
-  if ((i !== (i | 0))) {
+  if (i !== (i | 0)) {
     return void 0;
   }
   var size = this.size();
@@ -432,5 +524,8 @@ Denque.prototype._shrinkArray = function _shrinkArray() {
   this._capacityMask >>>= 1;
 };
 
+Denque.prototype.toString = function toString() {
+  return this.slice().toString();
+};
 
 module.exports = Denque;
